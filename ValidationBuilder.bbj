use java.util.HashMap
use ::BBjControlValidation/Validator.bbj::Validator
rem /**
rem  * The ValidationBuilder can be used to construct a collection of
rem  * javascript validators for a given control.
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public ValidationBuilder

  field protected Boolean Accumulate! = BBjAPI.TRUE
  field protected HashMap Validators! = new HashMap()
  rem /**
  rem  * Construct a new ValidationBuilder
  rem  */
  method public ValidationBuilder()
  methodend
  rem /**
  rem  * Construct a new ValidationBuilder
  rem  *
  rem  * @param accumulate! - When true , All violations will be accumulated and displayed in the control's error message.
  rem  *                      When false, only one violation message will be displayed at once.
  rem  *                      The default value is true.
  rem  */
  method public ValidationBuilder(Boolean accumulate!)
    #Accumulate! = accumulate!
  methodend
  rem /**
  rem  * Add a new validator to the builder
  rem  *
  rem  * @param validator! - The validator instance to add
  rem  */
  method public ValidationBuilder add(Validator validator!)
    key$ = str(#this!) + str(validator!)
    #getValidators().put(key$, validator!)
    methodret #this!
  methodend
  rem /**
  rem  * Remove an already add validator
  rem  *
  rem  * @param validator! - The validator instance to remove
  rem  */
  method public ValidationBuilder remove(Validator validator!)
    key$ = str(#this!) + str(validator!)
    validators! = #getValidators()

    if validators!.containsKey(key$)
      validators!.remove(key$)
    fi

    methodret #this!
  methodend
  rem /**
  rem  * Add `Blank` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is blank - meaning equals to a blank string or an empty array
  rem  *
  rem  * @param message$ - The error message to be display
  rem  */
  method public ValidationBuilder blank(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Blank.bbj::Blank(message$))
  methodend
  rem /**
  rem  * Add `Blank` validator with default error message
  rem  *
  rem  * Validates
  rem  */
  method public ValidationBuilder blank()
    methodret #add(new ::BBjControlValidation/Validators/Blank.bbj::Blank())
  methodend
  rem /**
  rem  * Add `NotBlank` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is not blank - meaning not equals to a blank string or an empty array
  rem  *
  rem  * @param message$ - The error message to be display
  rem  */
  method public ValidationBuilder notBlank(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/NotBlank.bbj::NotBlank(message$))
  methodend
  rem /**
  rem  * Add `NotBlank` validator with default error message
  rem  *
  rem  * Validates that the control's value is not blank - meaning not equals to a blank string or an empty array
  rem  */
  method public ValidationBuilder notBlank()
    methodret #add(new ::BBjControlValidation/Validators/NotBlank.bbj::NotBlank())
  methodend
  rem /**
  rem  * Add `IsTrue` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is true.
  rem  *
  rem  * @param message$ - The invalid message
  rem  */
  method public ValidationBuilder isTrue(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/IsTrue.bbj::IsTrue(message$))
  methodend
  rem /**
  rem  * Add `IsTrue` validator with the default error message
  rem  *
  rem  * Validates that the control's value is true.
  rem  */
  method public ValidationBuilder isTrue()
    methodret #add(new ::BBjControlValidation/Validators/IsTrue.bbj::IsTrue())
  methodend
  rem /**
  rem  * Add `IsTrue` validator with a custom error message
  rem  *
  rem  * Validates that the control is checked.
  rem  *
  rem  * @param message$ - The invalid message
  rem  */
  method public ValidationBuilder checked(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/IsTrue.bbj::IsTrue(message$))
  methodend
  rem /**
  rem  * Alias for `IsTrue` validator with the default error message
  rem  *
  rem  * Validates that the control is checked.
  rem  */
  method public ValidationBuilder checked()
    methodret #add(new ::BBjControlValidation/Validators/IsTrue.bbj::IsTrue("This field should be checked"))
  methodend
  rem /**
  rem  * Add `IsFalse` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is false.
  rem  *
  rem  * @param message$ - The invalid message
  rem  */
  method public ValidationBuilder isFalse(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/IsFalse.bbj::IsFalse(message$))
  methodend
  rem /**
  rem  * Add `IsFalse` validator with the default error message
  rem  *
  rem  * Validates that the control's value is false.
  rem  */
  method public ValidationBuilder isFalse()
    methodret #add(new ::BBjControlValidation/Validators/IsFalse.bbj::IsFalse())
  methodend
  rem /**
  rem  * Alias for `IsFalse` validator with a custom error message
  rem  *
  rem  * Validates that the control is unchecked.
  rem  *
  rem  * @param message$ - The invalid message
  rem  */
  method public ValidationBuilder notChecked(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/IsFalse.bbj::IsFalse(message$))
  methodend
  rem /**
  rem  * Alias for `IsFalse` validator with the default error message
  rem  *
  rem  * Validates that the control is unchecked.
  rem  */
  method public ValidationBuilder notChecked()
    methodret #add(new ::BBjControlValidation/Validators/IsFalse.bbj::IsFalse("This field should not be checked"))
  methodend
  rem /**
  rem  * Add `Length` validator with a custom error message
  rem  *
  rem  * Validates that the control's value length equal to a given length.
  rem  *
  rem  * @param length! - the length of the value
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder length(BBjNumber length!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Length.bbj::Length(length!, message$))
  methodend
  rem /**
  rem  * Add `Length` validator with the default error message
  rem  *
  rem  * Validates that the control's value length equal to a given length.
  rem  *
  rem  * @param length! - the length of the value
  rem  */
  method public ValidationBuilder length(BBjNumber length!)
    methodret #add(new ::BBjControlValidation/Validators/Length.bbj::Length(length!))
  methodend
  rem /**
  rem  * Add `MinLength` validator with a custom error message
  rem  *
  rem  * Validates that the control value's length is at least `x` characters long
  rem  *
  rem  * @param min! - The minimum length of the value
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder minLength(BBjNumber min!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/MinLength.bbj::MinLength(min!, message$))
  methodend
  rem /**
  rem  * Add `MinLength` validator with the default error message
  rem  *
  rem  * Validates that the control value's length is at least `x` characters long
  rem  *
  rem  * @param min! - The minimum length of the value
  rem  */
  method public ValidationBuilder minLength(BBjNumber min!)
    methodret #add(new ::BBjControlValidation/Validators/MinLength.bbj::MinLength(min!))
  methodend
  rem /**
  rem  * Add `MaxLength` validator with a custom error message
  rem  *
  rem  * Validates that the control value's length is equal or greater than the specified length.
  rem  *
  rem  * @param max! - The maximum length of the value
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder maxLength(BBjNumber max!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/MaxLength.bbj::MaxLength(max!, message$))
  methodend
  rem /**
  rem  * Add `MaxLength` validator with the default error message
  rem  *
  rem  * Validates that the control value's length is equal or greater than the specified length.
  rem  *
  rem  * @param max! - The maximum length of the value
  rem  */
  method public ValidationBuilder maxLength(BBjNumber max!)
    methodret #add(new ::BBjControlValidation/Validators/MaxLength.bbj::MaxLength(max!))
  methodend
  rem /**
  rem  * Add `Count` validator with a custom error message
  rem  *
  rem  * Validates that the control's value element count is equal to the specified length.
  rem  *
  rem  * @param count! - the length to compare the control's value element count to
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder count(BBjNumber count!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Count.bbj::Count(count!, message$))
  methodend
  rem /**
  rem  * Add `Count` validator with the default error message
  rem  *
  rem  * Validates that the control's value element count is equal to the specified length.
  rem  *
  rem  * @param count! - the length to compare the control's value element count to
  rem  */
  method public ValidationBuilder count(BBjNumber count!)
    methodret #add(new ::BBjControlValidation/Validators/Count.bbj::Count(count!))
  methodend
  rem /**
  rem  * Add `MinCount` validator with a custom error message
  rem  *
  rem  * Validates that the control's value element count is at least the specified minimum.
  rem  *
  rem  * @param min! - the minimum length to compare the control's value element count to
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder minCount(BBjNumber min!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/MinCount.bbj::MinCount(min!, message$))
  methodend
  rem /**
  rem  * Add `MinCount` validator with the default error message
  rem  *
  rem  * Validates that the control's value element count is at least the specified minimum.
  rem  *
  rem  * @param min! - the minimum length to compare the control's value element count to
  rem  */
  method public ValidationBuilder minCount(BBjNumber min!)
    methodret #add(new ::BBjControlValidation/Validators/MinCount.bbj::MinCount(min!))
  methodend
  rem /**
  rem  * Add `MaxCount` validator with a custom error message
  rem  *
  rem  * Validates that the control's value element count is at least the specified minimum.
  rem  *
  rem  * @param max! - the maximum length to compare the control's value element count to
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder maxCount(BBjNumber max!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/MaxCount.bbj::MaxCount(max!, message$))
  methodend
  rem /**
  rem  * Add `MaxCount` validator with the default error message
  rem  *
  rem  * Validates that the control's value element count is at least the specified minimum.
  rem  *
  rem  * @param max! - the maximum length to compare the control's value element count to
  rem  */
  method public ValidationBuilder maxCount(BBjNumber max!)
    methodret #add(new ::BBjControlValidation/Validators/MaxCount.bbj::MaxCount(max!))
  methodend
  rem /**
  rem  * Add `EqualTo` validator with a custom error message
  rem  *
  rem  * Validates that the value is equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder equalTo(BBjString comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/EqualTo.bbj::EqualTo(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `EqualTo` validator with the default error message
  rem  *
  rem  * Validates that the value is equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder equalTo(BBjString comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/EqualTo.bbj::EqualTo(comparedValue!))
  methodend
  rem /**
  rem  * Add `EqualTo` validator with a custom error message
  rem  *
  rem  * Validates that the value is equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder equalTo(BBjNumber comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/EqualTo.bbj::EqualTo(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `EqualTo` validator with the default error message
  rem  *
  rem  * Validates that the value is equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder equalTo(BBjNumber comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/EqualTo.bbj::EqualTo(comparedValue!))
  methodend
  rem /**
  rem  * Add `NotEqualTo` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is not equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder noEqualTo(BBjString comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/NotEqualTo.bbj::NotEqualTo(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `NotEqualTo` validator with the default error message
  rem  *
  rem  * Validates that the control's value is not equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder noEqualTo(BBjString comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/NotEqualTo.bbj::NotEqualTo(comparedValue!))
  methodend
  rem /**
  rem  * Add `NotEqualTo` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is not equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder noEqualTo(BBjNumber comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/NotEqualTo.bbj::NotEqualTo(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `NotEqualTo` validator with the default error message
  rem  *
  rem  * Validates that the control's value is not equal to the given value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder noEqualTo(BBjNumber comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/NotEqualTo.bbj::NotEqualTo(comparedValue!))
  methodend
  rem /**
  rem  * Add `GreaterThan` validator with a custom error message
  rem  *
  rem  * Validates that the value is greater than the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder greaterThan(BBjNumber comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/GreaterThan.bbj::GreaterThan(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `GreaterThan` validator with the default error message
  rem  *
  rem  * Validates that the value is greater than the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder greaterThan(BBjNumber comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/GreaterThan.bbj::GreaterThan(comparedValue!))
  methodend
  rem /**
  rem  * Add `GreaterThanOrEqual` validator with a custom error message
  rem  *
  rem  * Validates that the value is greater than or equals to the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder greaterThanOrEqual(BBjNumber comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/GreaterThanOrEqual.bbj::GreaterThanOrEqual(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `GreaterThanOrEqual` validator with the default error message
  rem  *
  rem  * Validates that the value is greater than or equals to the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder greaterThanOrEqual(BBjNumber comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/GreaterThanOrEqual.bbj::GreaterThanOrEqual(comparedValue!))
  methodend
  rem /**
  rem  * Add `LessThan` validator with a custom error message
  rem  *
  rem  * Validates that the value is less than the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder lessThan(BBjNumber comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/LessThan.bbj::LessThan(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `LessThan` validator with the default error message
  rem  *
  rem  * Validates that the value is less than the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder lessThan(BBjNumber comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/LessThan.bbj::LessThan(comparedValue!))
  methodend
  rem /**
  rem  * Add `LessThanOrEqual` validator with a custom error message
  rem  *
  rem  * Validates that the value is less than or equals the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder lessThanOrEqual(BBjNumber comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/LessThanOrEqual.bbj::LessThanOrEqual(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `LessThanOrEqual` validator with the default error message
  rem  *
  rem  * Validates that the value is less than or equals the specified value
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder lessThanOrEqual(BBjNumber comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/LessThanOrEqual.bbj::LessThanOrEqual(comparedValue!))
  methodend
  rem /**
  rem  * Add `DivisibleBy` validator with a custom error message
  rem  *
  rem  * Validates that the value is divisible by the given number.
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder divisibleBy(BBjNumber comparedValue!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/DivisibleBy.bbj::DivisibleBy(comparedValue!, message$))
  methodend
  rem /**
  rem  * Add `DivisibleBy` validator with the default error message
  rem  *
  rem  * Validates that the value is divisible by the given number.
  rem  *
  rem  * @param comparedValue! - The value to compare with
  rem  */
  method public ValidationBuilder divisibleBy(BBjNumber comparedValue!)
    methodret #add(new ::BBjControlValidation/Validators/DivisibleBy.bbj::DivisibleBy(comparedValue!))
  methodend
  rem /**
  rem  * Add `Regex` validator with a custom error message
  rem  *
  rem  * Validates that the control's value matches a regular expression.
  rem  *
  rem  * @param regex$ - the text of the regular expression.
  rem  * @param flags$ - the regular expression flags.
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder regex(BBjString regex$, BBjString flags$, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Regex.bbj::Regex(regex$, flags$, message$))
  methodend
  rem /**
  rem  * Add `Regex` validator with a custom error message
  rem  *
  rem  * Validates that the control's value matches a regular expression.
  rem  *
  rem  * @param regex$ - the text of the regular expression.
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder regex(BBjString regex$, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Regex.bbj::Regex(regex$, message$))
  methodend
  rem /**
  rem  * Add `Regex` validator with the default error message
  rem  *
  rem  * Validates that the control's value matches a regular expression.
  rem  *
  rem  * @param regex$ - the text of the regular expression.
  rem  */
  method public ValidationBuilder regex(BBjString regex$)
    methodret #add(new ::BBjControlValidation/Validators/Regex.bbj::Regex(regex$))
  methodend
  rem /**
  rem  * Add `Email` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid email address
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder email(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Email.bbj::Email(message$))
  methodend
  rem /**
  rem  * Add `Email` validator with the default error message
  rem  *
  rem  * Validates that a value is a valid email address
  rem  */
  method public ValidationBuilder email()
    methodret #add(new ::BBjControlValidation/Validators/Email.bbj::Email())
  methodend
  rem /**
  rem  * Add `Password` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid password (UpperCase, LowerCase, Number/SpecialChar and minimum `x` Chars)
  rem  *
  rem  * @param length! - The minimum length of the password
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder password(BBjNumber length!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Password.bbj::Password(length!, message$))
  methodend
  rem /**
  rem  * Add `Password` validator with the default error message
  rem  *
  rem  * Validates that a value is a valid password (UpperCase, LowerCase, Number/SpecialChar and minimum `x` Chars)
  rem  *
  rem  * @param length! - The minimum length of the password
  rem  */
  method public ValidationBuilder password(BBjNumber length!)
    methodret #add(new ::BBjControlValidation/Validators/Password.bbj::Password(length!))
  methodend
  rem /**
  rem  * Add `Password` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid password (UpperCase, LowerCase, Number/SpecialChar and minimum `x` Chars)
  rem  *
  rem  * @param message$ - The error message to display
  rem  */
  method public ValidationBuilder password(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Password.bbj::Password(message$))
  methodend
  rem /**
  rem  * Add `Password` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid password (UpperCase, LowerCase, Number/SpecialChar and minimum `x` Chars)
  rem  */
  method public ValidationBuilder password()
    methodret #add(new ::BBjControlValidation/Validators/Password.bbj::Password())
  methodend
  rem /**
  rem  * Add `DateTime` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid datetime, meaning a string that follows a valid input type="datetime" format. (i.e. 1996-12-19T16:39:57-08:00)
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder datetime(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/DateTime.bbj::DateTime(message$))
  methodend
  rem /**
  rem  * Add `DateTime` validator with the default error message
  rem  *
  rem  * Validates that a value is a valid datetime, meaning a string that follows a valid input type="datetime" format. (i.e. 1996-12-19T16:39:57-08:00)
  rem  *
  rem  */
  method public ValidationBuilder datetime()
    methodret #add(new ::BBjControlValidation/Validators/DateTime.bbj::DateTime())
  methodend
  rem /**
  rem  * Add `Date` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid date, meaning a string that follows a valid `YYYY-MM-DD` format.
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder date(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Date.bbj::Date(message$))
  methodend
  rem /**
  rem  * Add `Date` validator with the default error message
  rem  *
  rem  * Validates that a value is a valid date, meaning a string that follows a valid `YYYY-MM-DD` format.
  rem  */
  method public ValidationBuilder date()
    methodret #add(new ::BBjControlValidation/Validators/Date.bbj::Date())
  methodend
  rem /**
  rem  * Add `Time` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid time, meaning a string that follows a valid `HH:MM:SS` format.
  rem  *
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder time(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Time.bbj::Time(message$))
  methodend
  rem /**
  rem  * Add `Time` validator with the default error message
  rem  *
  rem  * Validates that a value is a valid time, meaning a string that follows a valid `HH:MM:SS` format.
  rem  */
  method public ValidationBuilder time()
    methodret #add(new ::BBjControlValidation/Validators/Time.bbj::Time())
  methodend
  rem /**
  rem  * Add `Choice` validator with a custom error message
  rem  *
  rem  * Validates that that the control's value is one of a given set of valid choices
  rem  *
  rem  * @param choices! - A vector of valid choices
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder choice(BBjVector choices!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Choice.bbj::Choice(choices!, message$))
  methodend
  rem /**
  rem  * Add `Choice` validator with the default error message
  rem  *
  rem  * Validates that that the control's value is one of a given set of valid choices
  rem  *
  rem  * @param choices! - A vector of valid choices
  rem  */
  method public ValidationBuilder choice(BBjVector choices!)
    methodret #add(new ::BBjControlValidation/Validators/Choice.bbj::Choice(choices!))
  methodend
  rem /**
  rem  * Add `Choice` validator with a custom error message
  rem  *
  rem  * Validates that that the control's value is one of a given set of valid choices
  rem  *
  rem  * @param choices! - A comma separated list of valid choices
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder choice(BBjString choices!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Choice.bbj::Choice(choices!, message$))
  methodend
  rem /**
  rem  * Add `Choice` validator with the default error message
  rem  *
  rem  * Validates that that the control's value is one of a given set of valid choices
  rem  *
  rem  * @param choices! - A comma separated list of valid choices
  rem  */
  method public ValidationBuilder choice(BBjString choices!)
    methodret #add(new ::BBjControlValidation/Validators/Choice.bbj::Choice(choices!))
  methodend
  rem /**
  rem  * Add `Match` validator with a custom error message
  rem  *
  rem  * Validates that a control's value matches the value of a second control which can be found with the given selector
  rem  *
  rem  * @param selector$ - The query selector to use in order to find the control in the DOM
  rem  * @param message$ - The invalid message
  rem  */
  method public ValidationBuilder match(BBjString selector$, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Match.bbj::Match(selector$, message$))
  methodend
  rem /**
  rem  * Add `Match` validator with the default error message
  rem  *
  rem  * Validates that a control's value matches the value of a second control which can be found with the given selector
  rem  *
  rem  * @param selector$ - The query selector to use in order to find the control in the DOM
  rem  */
  method public ValidationBuilder match(BBjString selector$)
    methodret #add(new ::BBjControlValidation/Validators/Match.bbj::Match(selector$))
  methodend
  rem /**
  rem  * Add `Json` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid json string
  rem  *
  rem  * @param message$ - @param message$ - the error message to display
  rem  */
  method public ValidationBuilder json(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Json.bbj::Json(message$))
  methodend
  rem /**
  rem  * Add `Json` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid json string
  rem  */
  method public ValidationBuilder json()
    methodret #add(new ::BBjControlValidation/Validators/Json.bbj::Json())
  methodend
  rem /**
  rem  * Add `PastDate` validator with a custom error message
  rem  *
  rem  * Validates that the controls's value is a date in the past. The time portion of the date will be ignored.
  rem  *
  rem  * @param inclusive! - When true , the current date will be included.
  rem  * @param message$ - @param message$ - the error message to display
  rem  */
  method public ValidationBuilder pastDate(BBjNumber inclusive!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/PastDate.bbj::PastDate(inclusive!, message$))
  methodend
  rem /**
  rem  * Add `PastDate` validator with a custom error message
  rem  *
  rem  * Validates that the controls's value is a date in the past. The time portion of the date will be ignored.
  rem  *
  rem  * @param message$ - @param message$ - the error message to display
  rem  */
  method public ValidationBuilder pastDate(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/PastDate.bbj::PastDate(message$))
  methodend
  rem /**
  rem  * Add `PastDate` validator with a custom error message
  rem  *
  rem  * Validates that the controls's value is a date in the past. The time portion of the date will be ignored.
  rem  *
  rem  * @param inclusive! - When true , the current date will be included.
  rem  */
  method public ValidationBuilder pastDate(BBjNumber inclusive!)
    methodret #add(new ::BBjControlValidation/Validators/PastDate.bbj::PastDate(inclusive!))
  methodend
  rem /**
  rem  * Add `PastDate` validator with the default error message
  rem  *
  rem  * Validates that the controls's value is a date in the past. The time portion of the date will be ignored.
  rem  */
  method public ValidationBuilder pastDate()
    methodret #add(new ::BBjControlValidation/Validators/PastDate.bbj::PastDate())
  methodend
  rem /**
  rem  * Add `FutureDate` validator with a custom error message
  rem  *
  rem  * Validates that the controls's value is a date in the future. The time portion of the date will be ignored.
  rem  *
  rem  * @param inclusive! - When true , the current date will be included.
  rem  * @param message$ - @param message$ - the error message to display
  rem  */
  method public ValidationBuilder futureDate(BBjNumber inclusive!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/FutureDate.bbj::FutureDate(inclusive!, message$))
  methodend
  rem /**
  rem  * Add `FutureDate` validator with a custom error message
  rem  *
  rem  * Validates that the controls's value is a date in the future. The time portion of the date will be ignored.
  rem  *
  rem  * @param message$ - @param message$ - the error message to display
  rem  */
  method public ValidationBuilder futureDate(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/FutureDate.bbj::FutureDate(message$))
  methodend
  rem /**
  rem  * Add `FutureDate` validator with a custom error message
  rem  *
  rem  * Validates that the controls's value is a date in the future. The time portion of the date will be ignored.
  rem  *
  rem  * @param inclusive! - When true , the current date will be included.
  rem  */
  method public ValidationBuilder futureDate(BBjNumber inclusive!)
    methodret #add(new ::BBjControlValidation/Validators/FutureDate.bbj::FutureDate(inclusive!))
  methodend
  rem /**
  rem  * Add `FutureDate` validator with the default error message
  rem  *
  rem  * Validates that the controls's value is a date in the future. The time portion of the date will be ignored.
  rem  */
  method public ValidationBuilder futureDate()
    methodret #add(new ::BBjControlValidation/Validators/FutureDate.bbj::FutureDate())
  methodend
  rem /**
  rem  * Add `IPv4` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid IPv4 address
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder ipv4(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/IPv4.bbj::IPv4(message$))
  methodend
  rem /**
  rem  * Add `IPv4` validator with the default error message
  rem  *
  rem  * Validates that a value is a valid IPv4 address
  rem  */
  method public ValidationBuilder ipv4()
    methodret #add(new ::BBjControlValidation/Validators/IPv4.bbj::IPv4())
  methodend
  rem /**
  rem  * Add `IPv6` validator with a custom error message
  rem  *
  rem  * Validates that a value is a valid IPv6 address
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder ipv6(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/IPv6.bbj::IPv6(message$))
  methodend
  rem /**
  rem  * Add `IPv6` validator with the default error message
  rem  *
  rem  * Validates that a value is a valid IPv6 address
  rem  */
  method public ValidationBuilder ipv6()
    methodret #add(new ::BBjControlValidation/Validators/IPv6.bbj::IPv6())
  methodend
  rem /**
  rem  * Add `AlphaNumeric` validator with a custom error message
  rem  *
  rem  * Validates that the control's value contains only alphabetical and numerical characters.
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder alphaNumeric(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/AlphaNumeric.bbj::AlphaNumeric(message$))
  methodend
  rem /**
  rem  * Add `AlphaNumeric` validator with the default error message
  rem  *
  rem  * Validates that the control's value contains only alphabetical and numerical characters.
  rem  */
  method public ValidationBuilder alphaNumeric()
    methodret #add(new ::BBjControlValidation/Validators/AlphaNumeric.bbj::AlphaNumeric())
  methodend
  rem /**
  rem  * Add `URL` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is valid URL
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder url(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/URL.bbj::URL(message$))
  methodend
  rem /**
  rem  * Add `URL` validator with the default error message
  rem  *
  rem  * Validates that the control's value is valid URL
  rem  */
  method public ValidationBuilder url()
    methodret #add(new ::BBjControlValidation/Validators/URL.bbj::URL())
  methodend
  rem /**
  rem  * Add `Host` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is valid URL containing the domain name.
  rem  *
  rem  * @param hosts! - A vector of valid hosts
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder host(BBjVector hosts!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Host.bbj::Host(hosts!, message$))
  methodend
  rem /**
  rem  * Add `Host` validator with the default error message
  rem  *
  rem  * Validates that the control's value is valid URL containing the domain name.
  rem  *
  rem  * @param hosts! - A vector of valid hosts
  rem  */
  method public ValidationBuilder host(BBjVector hosts!)
    methodret #add(new ::BBjControlValidation/Validators/Host.bbj::Host(hosts!))
  methodend
  rem /**
  rem  * Add `Host` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is valid URL containing the domain name.
  rem  *
  rem  * @param hosts! - A comma separated list of valid hosts
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder host(BBjString hosts!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Host.bbj::Host(hosts!, message$))
  methodend
  rem /**
  rem  * Add `Host` validator with the default error message
  rem  *
  rem  * Validates that the control's value is valid URL containing the domain name.
  rem  *
  rem  * @param hosts! - A comma separated list of valid hosts
  rem  */
  method public ValidationBuilder host(BBjString hosts!)
    methodret #add(new ::BBjControlValidation/Validators/Host.bbj::Host(hosts!))
  methodend
  rem /**
  rem  * Add `Protocol` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is valid URL with the given protocol.
  rem  *
  rem  * @param protocols! - A vector of valid protocols
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder protocol(BBjVector protocols!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Protocol.bbj::Protocol(protocols!, message$))
  methodend
  rem /**
  rem  * Add `Protocol` validator with the default error message
  rem  *
  rem  * Validates that the control's value is valid URL with the given protocol.
  rem  *
  rem  * @param protocols! - A vector of valid protocols
  rem  */
  method public ValidationBuilder protocol(BBjVector protocols!)
    methodret #add(new ::BBjControlValidation/Validators/Protocol.bbj::Protocol(protocols!))
  methodend
  rem /**
  rem  * Add `Protocol` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is valid URL with the given protocol.
  rem  *
  rem  * @param protocols! - A comma separated list of valid protocols
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder protocol(BBjString protocols!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Protocol.bbj::Protocol(protocols!, message$))
  methodend
  rem /**
  rem  * Add `Protocol` validator with the default error message
  rem  *
  rem  * Validates that the control's value is valid URL with the given protocol.
  rem  *
  rem  * @param protocols! - A comma separated list of valid protocols
  rem  */
  method public ValidationBuilder protocol(BBjString protocols!)
    methodret #add(new ::BBjControlValidation/Validators/Protocol.bbj::Protocol(protocols!))
  methodend
  rem /**
  rem  * Add `UUID` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid UUID
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder uuid(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/UUID.bbj::UUID(message$))
  methodend
  rem /**
  rem  * Add `UUID` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid UUID
  rem  */
  method public ValidationBuilder uuid()
    methodret #add(new ::BBjControlValidation/Validators/UUID.bbj::UUID())
  methodend
  rem /**
  rem  * Add `Md5` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid Md5 hash
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder md5(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Md5.bbj::Md5(message$))
  methodend
  rem /**
  rem  * Add `Md5` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid Md5 hash
  rem  */
  method public ValidationBuilder md5()
    methodret #add(new ::BBjControlValidation/Validators/Md5.bbj::Md5())
  methodend
  rem /**
  rem  * Add `IBAN` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is valid IBAN number.
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder iban(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/IBAN.bbj::IBAN(message$))
  methodend
  rem /**
  rem  * Add `IBAN` validator with the default error message
  rem  *
  rem  * Validates that the control's value is valid IBAN number.
  rem  */
  method public ValidationBuilder iban()
    methodret #add(new ::BBjControlValidation/Validators/IBAN.bbj::IBAN())
  methodend
  rem /**
  rem  * Add `BIC` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid BIC code
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder bic(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/BIC.bbj::BIC(message$))
  methodend
  rem /**
  rem  * Add `BIC` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid BIC code
  rem  */
  method public ValidationBuilder bic()
    methodret #add(new ::BBjControlValidation/Validators/BIC.bbj::BIC())
  methodend
  rem /**
  rem  * Add `Luhn` validator with a custom error message
  rem  *
  rem  * Validates that the control's value with Luhn.
  rem  * It is useful as a first step to validating a credit card: before communicating with a payment gateway.
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder luhn(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/Luhn.bbj::Luhn(message$))
  methodend
  rem /**
  rem  * Add `Luhn` validator with the default error message
  rem  *
  rem  * Validates that the control's value with Luhn.
  rem  * It is useful as a first step to validating a credit card: before communicating with a payment gateway.
  rem  */
  method public ValidationBuilder luhn()
    methodret #add(new ::BBjControlValidation/Validators/Luhn.bbj::Luhn())
  methodend
  rem /**
  rem  * Add `CardScheme` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid card type.
  rem  *  
  rem  * The following is the list of supported types: 
  rem  * `Amex`, `Dankort`, `Diners`, `Discover`, `JCB`, `MasterCard`, `VisaElectron`, `Visa`.
  rem  *
  rem  * @param types! - A vector of valid hosts
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder cardScheme(BBjVector types!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/CardScheme.bbj::CardScheme(types!, message$))
  methodend
  rem /**
  rem  * Add `CardScheme` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid card type.
  rem  *  
  rem  * The following is the list of supported types: 
  rem  * `Amex`, `Dankort`, `Diners`, `Discover`, `JCB`, `MasterCard`, `VisaElectron`, `Visa`.
  rem  *
  rem  * @param types! - A vector of valid hosts
  rem  */
  method public ValidationBuilder cardScheme(BBjVector types!)
    methodret #add(new ::BBjControlValidation/Validators/CardScheme.bbj::CardScheme(types!))
  methodend
  rem /**
  rem  * Add `CardScheme` validator with a custom error message
  rem  *
  rem  * The following is the list of supported types: 
  rem  * `Amex`, `Dankort`, `Diners`, `Discover`, `JCB`, `MasterCard`, `VisaElectron`, `Visa`.
  rem  *
  rem  * @param types! - A comma separated list of valid hosts
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder cardScheme(BBjString types!, BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/CardScheme.bbj::CardScheme(types!, message$))
  methodend
  rem /**
  rem  * Add `CardScheme` validator with the default error message
  rem  *
  rem  * The following is the list of supported types: 
  rem  * `Amex`, `Dankort`, `Diners`, `Discover`, `JCB`, `MasterCard`, `VisaElectron`, `Visa`.
  rem  *
  rem  * @param types! - A comma separated list of valid hosts
  rem  */
  method public ValidationBuilder cardScheme(BBjString types!)
    methodret #add(new ::BBjControlValidation/Validators/CardScheme.bbj::CardScheme(types!))
  methodend
  rem /**
  rem  * Add `VAT` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid VAT identification number.
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder vat(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/VAT.bbj::VAT(message$))
  methodend
  rem /**
  rem  * Add `VAT` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid VAT identification number.
  rem  */
  method public ValidationBuilder vat()
    methodret #add(new ::BBjControlValidation/Validators/VAT.bbj::VAT())
  methodend 
  rem /**
  rem  * Add `ISBN` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid International Standard Book Number (ISBN).
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder isbn(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/ISBN.bbj::ISBN(message$))
  methodend
  rem /**
  rem  * Add `ISBN` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid International Standard Book Number (ISBN).
  rem  */
  method public ValidationBuilder isbn()
    methodret #add(new ::BBjControlValidation/Validators/ISBN.bbj::ISBN())
  methodend 
  rem /**
  rem  * Add `SocialSecurityNumber` validator with a custom error message
  rem  *
  rem  * Validates that the control's value is a valid social security number
  rem  *
  rem  * @param message$ - the error message to display
  rem  */
  method public ValidationBuilder socialSecurityNumber(BBjString message$)
    methodret #add(new ::BBjControlValidation/Validators/SocialSecurityNumber.bbj::SocialSecurityNumber(message$))
  methodend
  rem /**
  rem  * Add `SocialSecurityNumber` validator with the default error message
  rem  *
  rem  * Validates that the control's value is a valid social security number
  rem  */
  method public ValidationBuilder socialSecurityNumber()
    methodret #add(new ::BBjControlValidation/Validators/SocialSecurityNumber.bbj::SocialSecurityNumber())
  methodend           
  rem /**
  rem  * Build the required javascript code to initialize the validation
  rem  *
  rem  * @return the code of the javascript validators
  rem  */
  method public String build()
    code$ = "" +
:    "const violations = [];" +
:    "const accumulate = !!" + str(#getAccumulate()) + ";" +
:    "let valid = true;" +
:    "const buildViolation = (message, data) => message.replace(/{{(.*?)}}/g, (match) => {return data[match.split(/{{|}}/).filter(Boolean)[0].trim()]});" +
:    "const addViolation = (message, data) => {valid = valid && false; violations.push(buildViolation(message, Object.assign(data || {}, {x,value,text})))};" +
:    "const toOL = arr => arr.length === 1 ? arr[0] : '<ol>' + arr.reduce((html, item) =>  html + '<li>' + item + '</li>', '') + '</ol>';"
    iterator! = #getValidators().entrySet().iterator()
    while iterator!.hasNext()
      validator! = iterator!.next().getValue()
      code$ = code$ +
:      "(() => {" + validator!.build() + ";})();" +
:      "if(!valid && !accumulate){" +
:      "  control.invalidMessage = toOL(violations);" +
:      "  return false;" +
:      "}"
    wend

    methodret code$ +
:    "if(!valid) control.invalidMessage = toOL(violations);" +
:    "return valid;"
  methodend
  rem /**
  rem  * Build the required javascript code to initialize the validation
  rem  *
  rem  * @return the code of the javascript validators
  rem  */
  method public String toString()
    methodret #build()
  methodend

classend
