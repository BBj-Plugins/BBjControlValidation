use ::BBjControlValidation/Validator.bbj::Validator
rem /**
rem  * Validates that the control's value matches a regular expression.
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public Regex extends Validator
  rem /**
  rem  * @param regex$ - The text of the regular expression.
  rem  */
  method public Regex(BBjString regex$)
    #this!(regex$, "", "The value is not valid.")
  methodend
  rem /**
  rem  * @param regex$ - the text of the regular expression.
  rem  * @param message$ - the error message to display
  rem  */
  method public Regex(BBjString regex$, BBjString message$)
    #this!(regex$, "", message$)
  methodend
  rem /**
  rem  * @param regex$ - the text of the regular expression.
  rem  * @param flags$ - the regular expression flags.
  rem  * @param message$ - the error message to display
  rem  */
  method public Regex(BBjString regex$, BBjString flags$, BBjString message$)
    #super!(message$, "")
    #Validator$ = "" +
:    "const regex = '" + regex$ + "';" +
:    "const flags = '" + flags$ + "';" +
:    "if ((text.trim().length) && !(new RegExp(regex,flags)).test(text)) {" +
:    "  addViolation('" + message$ + "', Object.assign(typeof data === 'undefined' ? {} : data , {regex,flags}));" +
:    "}"
  methodend

classend
