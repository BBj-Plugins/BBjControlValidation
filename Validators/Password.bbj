use ::BBjControlValidation/Validators/Regex.bbj::Regex
rem /**
rem  * Validates that a value is a valid password (UpperCase, LowerCase, Number/SpecialChar and minimum `x` Chars)
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public Password extends Regex

  method public Password()
    #this!(8)
  methodend
  rem /**
  rem  * @param message$ - The error message to display
  rem  */
  method public Password(BBjString message$)
    #this!(8, message$)
  methodend
  rem /**
  rem  * @param length! - The minimum length of the password
  rem  */
  method public Password(BBjNumber length!)
    #this!(length!, "The password should be at least {{length}} characters long, contain at least one number and have a mixture of uppercase and lowercase letters.")
  methodend
  rem /**
  rem  * @param length! - the minimum length of the password
  rem  * @param message$ - the error message to display
  rem  */
  method public Password(BBjNumber length!, BBjString message$)
    #super!("(?=^.{" + str(length!) + ",}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$", "gm", message$)
    #Validator$ = "const data={}; data['length'] = " + str(length!) + ";" + #Validator$
  methodend

classend
